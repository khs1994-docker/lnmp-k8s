---
# Source: harbor/templates/chartmuseum/chartmuseum-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  CACHE_REDIS_PASSWORD: ""
---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "V1BiR0RzaGJKckVTaE9kQw=="
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwekNDQXJ1Z0F3SUJBZ0lKQVBZL096TE1lVnEyTUEwR0NTcUdTSWIzRFFFQkN3VUFNQUF3SGhjTk1Ua3cKTkRFNE1ESXlOek0zV2hjTk1qa3dOREUxTURJeU56TTNXakFBTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBZzhBTUlJQ0NnS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQWFOUU1FNHdIUVlEVlIwT0JCWUVGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUI4R0ExVWRJd1FZTUJhQQpGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0lCQU1Bc0V0VmxFTE13ZHRjaWZIZU9UMGtPbWY1d285SW4vZUZTZ3NjQ3pCTURhUngyQjNxMzZBb1MKSWw3WFdBWnBldmFSN1c3eWVBUkthQXNoQkxoeWdVcUxEMHpXYktsU045SHByZDF3ZHBNMGZmeVBwTjVkeE9ZQQplcjA0eTEyR1JuQ2JNWXFpNGN2enRQNFRpblhxcTJ5SFNZaExiTzlxa0k1Z2JXVnhrUnVJY01Ldml4ZGRsbE5ZClEzb2JKYURESG1vdk0zK2cvRysxWUZndDRxRVMzOFhuSjdCclNzaEhubjVFSVFoMjg2eGZKcml5cksyaEhiTEoKcXowWXVGNkczRFhQZVdHZ1h2ajBIaXBjMGY4VURaa0tray9lR0VJNnZFa3l0eXZvZXBvWkkyWGJBZi9aTXk1bgpLd3VoRW40aGhrRk13V2FTV3AvaDBRZE1DYXhrNEJWU09xbU5WYUxTQjcrRmpzSWo0Q2FzRm90WWl5SjJncFJCCk5mOFFhUzRiejBUbjFlQmJDOGtzaitlM1pXZVgyYjV3Vk1qcWw5alR0MlgxSUNzOEtLZTN2RUJranFUMkFVaTIKNTJUdEt6bTczYVdyei9HUHkvUTJMQ29yM0ZoOUZHVlNCT0JCRFhHeTZNSnBOSEpuWVZIOUVFTkZHT2g4NW9sMQoycEFET0JCNXZBVS9rTEI1TEhQajJrdWUvRk1pSGFObnJTWUlHck1sQlNYMmpqOUVZYTF1dVVIK3BkNE1CajFGCjV1SDhPUmlhUTZodDIrV0hrbHhpYzFSajV5VFlRd1ZsSDcwQ0JPbitxVkVkbzYzeVF3ekFNSktGSXdsR1VRRVgKamlsamdjODZxNGNadFVURnJjd01pZGJrKzhRNitKYkRWZzdIVi8rcG5DK3dudjE5N2t3ZQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQVFLQ0FnRUFrOHE4czRQcnZZYnk3OVVWbFdKTktxY2V5a3dCa3hFMWZqcllPUldRMmhpQWlyeEdWNSs4bERULwprNnVqbTFFV3diNUswSHh4UktrYitQRWExSHFOTkhFNkp4TnBKS0s5ZXhEbFlBUSt4N2RGQnFWci8ybmF6bW80Ck1COE1MWWxtSXp0V1dvU1l3ZThvMm1FZzRxK2J4WXM1SW1kdTdBa2hFN2RKNjNobTIzZ0xNZmVNTGFsUnFvcHUKWEJQd0U1blhQNmFHdVVOSHRHMUs4dFFKRGxaWStMRWJBZU9mUmVOUWhUOU5kUnVrWVNXNTc5dmZLYmxKclN2egp1bGc4OXNWbTNjV0VLNXBCNnJqOXdKYks5NHZvS2Z0VnFiYnVCd1dqZDFhOXBpYktod1ZCZTJMMkZXaHBTWmM1CkYvY29DN25qVGFZVDZ0cjkxeTVWaGhKaElaUUNmL3Z2NFpsNVhoRkhzNVZUWk5iTS9PZnF5RlFMWVhWSk80OEsKRjd0bWF6QUVRUUJRd1ZacUg5QzlOUWR6UEhXbWMzOE9raHRjMXd6YXFuL3JnOSsxc2dBTUQ4aFdDdFFKVWU5NwpiOXltaDVBMFo0UVhLcHlGVDBiK3BYY0QxalJoYTA3VXRrWCsvekxKOUhwQVhjVW16a0crajVDWE5wbnhzSXE1CmZKRmVxM2hCajl3Nm40aCs1ME00VzBGc2U1WW9FVXNjM0IwZno4QmxRQmIrWUpMRkxOSDM0TUg4cDFsMFpEWUoKeWFlMHBzeGxCaWpnNE9QWitXQ0JhK2p0Rlc0TGlXZ0VjeHdnejh3K2hFT0FRcjJhMURjN3c4amQrWTRJSzhVbQpsVFZzNWRicDRtT21QTWxSdi9HTTdrRHVkRnFiTWczWUZ3WGczUWJxdVZxTFp6RXpqVmtDZ2dFQkFQSktaYkNXCllmTGVqa1MvZmtSeVYzVkliNTRtS3dRSG9NV3ViODh0UGdHdVh6anNKeWQ1UVRRNThQcFVqWHJMSG1uOGxTMisKdmlFOEdKeWxLd04xeU1sWnc0MCtrWmhwSFVwQ1d4LzJaS2pBcXZxQTlPT0tvMmZ2NkhkL3dPQW5VNEN0aW9DMQpwcmk3bEtGWVhvUDhEdFFWd0hZdkl6Q1JxRG5oYzRtd0pEcXpUQzl4ZHVJK3N2eHpsNHhIODJmeDBqclBpRlkrCi93T2RYanlmSVBqeWhIQzRqUFRXYmFpcndYUzlkQmpTbDEyOGFJUlQ1ODAveVhFL1NZQXVnZzA1akt0ZzV6UUEKU28xM01UZXpYUkhYZE8wZGkzdEVNSEdSRUVrRnBlVm5uUFF2Q0NlZEswRFYzNmlOd2lXYzhwd2RmTE1WbmVUdApES3daZWRDeCtvLzdldjBDZ2dFQkFPdTQ4REdFSkpKekh4VlI1bVkxSzJBbFp5WXRwVE9XZWhLMXpYNzRKdk0zCll4TjRuZCtaeDVuOXVTUG1tS3pxRjNUVSs0NFJWdGRKSzZlam9GRThkTURUTldhU0xXL1pEbU4xblQwbmp2T24KSVdKbjU5eW5PQ2hXV0taZ1haLzlVcUdSN1B0Nk94U2trZXg5Yy9mWUJzTVgveHVzZFhRaWdlb2dsMGlPWVZGVwpnWElpaUxSTEhwSEpzSy91TnhJaXpqMGhUWVluN3VEN1BSRU53RlJjQ1lmOEoxZVVGYmQ2RHVDVldlUUNLV2dmCk5kMnRTV29pMFZ5bGo0dVVYOEl3MHRqTE5NRDVDUkVKRWs0R1N2NEVEU212VWR2MUxpQktKQ0wybEVjZ29QZUMKb09EMmlDYzVLcWdubVFyYVJpbEZGazhSVlhBOVBXWkdZM0MwYjZUVm1tY0NnZ0VBTlpPMkFPS0FMbENBYlR0YgpGSStrUDA4UlA0dDVINThBTWpac2l3ZWFHbzBRaVduUERxK0ZkNk1JWXBLbjVtdGNBbHZVTVJWb3ZiaW9TSnROCmM2cHNCL3BOZjhKQ044Mm1xSEViN1dseXdNNDZBTUxiWkNXWUZMZThWQkJ2K2lFNEdkQkdQRWZ1NGhLNHZ5VG4KWVpBdlJ6NjRIR280QWRsenRiamc3NlYvbld0Z2dXMDV1TFhjcG01NUtKQVFodisyV1VMakJ3OVBIT0dEb1N3ZgpBbTIrVTU2N3JMaHQ3MHByc1FEajEwbGFKMlF1U0hTMVlYR2xmZUZjdzNlRlVwOVROK0pwdmRvQ29sMmxDSWdsCklIamdaajZPUldmQ3Zwb3hXN1JnQnVadWtxQ0QwUjYwSGRZdGF2eE4zanRpZXBzYXBBODNweE8wSmFwTWdaV1oKcnBVUmtRS0NBUUJPY0V2OUxpdTlUL0dYOXBqa2llelZJWjBoWnk4QjY2RFRlUXZZcEZyUnRDeVQzaDhxdU5GaQp2THRPNXYwSERSNmhFZjVqV0FHOXdldDA3VTM3dWxKZmwraTlLUWRWb0xUWkE5bys3MXJ5V1RzU3MrREQzQ0VqCnl4ZlV4VnhpVUxtZWFpQ2h6aHE2MDhoN0dZUHRoVVU2eGxGdHRBV2hqNW9MZnF6WXlBZzZPTDc2YStOeG0wMmcKMWF5bDNtOFU2ZUFYRjIza3BvVW0rSE5wcVZuR3VKbXpWb1VBNzVZS1orTnJlRWRoU0JiZlB3TjlzSnd0WlVpbAp1N0g0a0hjTTk1SXg4ZXlzQ2pLcUtJcWV6QmxJVGJEVG5qTnZMamNiSjVDKzBhNmx2SVhUMXZRUjUvZUdsYzlNCkJXRTM2MHBOa1YvTEQ4bU9mOUplcGkyUTQzb0RMOUVoQW9JQkFRRFRXSW1meTBLOWdHekEyclB5MTY5bVdZUUsKT2xjbkQzK2hRcTZ4NTFabjFlL3RleEZlVmxoSG40cnJuUmRDRk9BcDQ3dUZrSjJtNzJHQ1ZENzRFd1F1Y0s5eQpBRDVqb3JxZ1ZIcUNLWmRrSGpiMlY2ME16bTZnM3J0TDlXSlhGVkx2TkJiL1FHQjJ2Z0hWT08wenFpcUdaajRlCkV4N2wybS8vNVNFNERMdG43MEo5Q2dHMUh0WENTOGRXckdQTDFwekRuazhWWHRub1h6YjBMQ2hMVUZFZ1pSbWgKY1Y2QUZIRUsySDh3Qkh2aU55ZWhzUlFpRGtsMkFpV09jSk52a3pXNjhjazJuSmpSV3lQWUsxSkwzTkNLcEIzUQpPb2hyUDBmSGNXQVhNVzk3d0ZYWmhSZm5RZkR4eElPbGozTWNZVDBBbGFuWGQwRjROR2MyTnZtcGh4MDQKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CSRF_KEY: "emhGdjBHaFJZYVpRNkRWYkxKRG9IdUNZc0h2Vkw2Sng="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/ingress/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-ingress"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURYakNDQWthZ0F3SUJBZ0lSQU1VVXhoL29LVm9tUkhGcUx6dVZmaVF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl4TURreU1EQTNNRGN3TmxvWERUSXlNRGt5TURBMwpNRGN3Tmxvd0h6RWRNQnNHQTFVRUF4TVVhR0Z5WW05eUxuUXVhMmh6TVRrNU5DNWpiMjB3Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNxdHRJTjFBYUJsc2xBZTYxbGVCWVUxQ3BiOWhiS0U3bncKK0oweVhKUVhucnpGQTkzMnNaRmRqTW5YNGZieHhuWDN0eklrTStHayt5YVJCNGsrUU9xNy9pS3BkWFc2WXkzcwpvQkE3MHh0YmNwMmhOSVpKZnd1YXh0QmhXRU8wd3ArUnV6TUoyOCtJWUJYRVI2SmNWY3c5T2ZFRnI1QTRveGkyCnhLL3pHYkE2QXFLWms1OWVGclNPLzJYUmF4QlFrVE83WHB3ZDVIc1Fhd3VhRTQwUnlEVHpqSlhvUHkweVRBckcKNVU3alJxNW1hNHhoZEY1VlczQ0xPTGRqOHpabWZlZTVXSEZtZVkvd2swajUzelE5WFZVcHFoTWFSbnJicHhyVQo0VnJhclorYnYvM2w4REdmSG1wSTZSa1VwQzd1S2hNNEVzZHdNTUFlYmZNOHlISkxJNlFWQWdNQkFBR2pnWjh3Cmdad3dEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0QKQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRklOOTVkanNMUisyUHJrOHhmc3c4Vk9rVXF1QgpNRHdHQTFVZEVRUTFNRE9DRkdoaGNtSnZjaTUwTG10b2N6RTVPVFF1WTI5dGdodHViM1JoY25rdGFHRnlZbTl5CkxuUXVhMmh6TVRrNU5DNWpiMjB3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUU5R05FdG02QnNhOFEyWVpXSmkKVVpNTW9NN2JXMi9Vb3I5dXlYT0picWY2cXJ3RzExZGtuak1aSjNnd0ZkMkpPUmF3WURZQzk4S2JFZWorZC9NdQpYM1YvRzhnaDZKbFZ3TE52SS9JUHRIV1NXUThYUWtYOURxci9ZRTNTaEdCMGszcXhrODdGK1EwY3NtemdrUCtMCmFCQmVqcFh2WDkwMGRJcXlPLzZKSWdySU9DRzBsdHl4MlpORzN1RmwycWw1alBCK1FIY0V0WnI5MUNvc1pOT3YKSGlGMTlTNHdNNlNaYysyeFhlUmtIZEFrVEhzQnY3TDZlbEFJVXNYVWdmN3BVYndxbDhWVW1zS0kzZ0k1QkZPRgpqRklteGluTFlMMWdKMkNHYXJteGNoWHJWemFObDFUYXVvWVJWS2hxYXAvUGx5NUJKUGpQQjBpQkp5THora21xClZQUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBcXJiU0RkUUdnWmJKUUh1dFpYZ1dGTlFxVy9ZV3loTzU4UGlkTWx5VUY1Njh4UVBkCjlyR1JYWXpKMStIMjhjWjE5N2N5SkRQaHBQc21rUWVKUGtEcXUvNGlxWFYxdW1NdDdLQVFPOU1iVzNLZG9UU0cKU1g4TG1zYlFZVmhEdE1LZmtic3pDZHZQaUdBVnhFZWlYRlhNUFRueEJhK1FPS01ZdHNTdjh4bXdPZ0tpbVpPZgpYaGEwanY5bDBXc1FVSkV6dTE2Y0hlUjdFR3NMbWhPTkVjZzA4NHlWNkQ4dE1rd0t4dVZPNDBhdVptdU1ZWFJlClZWdHdpemkzWS9NMlpuM251Vmh4Wm5tUDhKTkkrZDgwUFYxVkthb1RHa1o2MjZjYTFPRmEycTJmbTcvOTVmQXgKbng1cVNPa1pGS1F1N2lvVE9CTEhjRERBSG0zelBNaHlTeU9rRlFJREFRQUJBb0lCQVFDRjV3S2FBQjNlVmJTagoxSjZzZ1dYb2pvWnZQWGFncUpwbmpjcFhiMUJsdW9mY2pPejBqRkUyTExGQm1TZEdlMkdhbk9KQ2pVTkhVZ3Z0CkpCa2RjSFB1WXljeS9rUUtuN0tzOE52cTRPcUxienArOEtFSVV4TjZJc25lSVFweVpWb2VSOVIvdmg5cG05eFcKNmMxTFdhenF0V0Q5RWJreEE1VGwveDczc3NXTXFhNTBkOHZZTVlqSnZ3Ynh6cE5TQUVaOUpoam5aV2RnNHNSYgpEeXF4R0hlL2M5b0JuajBLUEplbjJ2L1hQTGx4aEtIbFNPVEpaQWkreHNCMUhqWjd5TEdvTE44dVlDdTBibFhzCjdXbXMrU2t4YWxzcjVubTg0QkRuRFdESm84L3dRWlZ4bXlVNmU5cjFrT0hqWlZjRU9xQUZweTdYUUxtakVvU0sKdXVpWmVXTUJBb0dCQU15NkN3RGIybjdnQStteUhRUjNXakQ3NCtjUnp4RTRQQTExdlNhTmZLSHdJT000dTZLcQpFcVhVeDhsOWJ2emJFM0UrWDEzWW1mQ2VLYnZGSituNkc1T2Jqd1dRSkQrbUhUclRNbDlQb3lVRlI3d09meCthCnl1VTBXWDBmK1JsbWF6U0pJYUNIZG94MGRvZWtWUC9BQ0I1dWIrd3EvSStzaDl4NEJaaVl4cnpCQW9HQkFOVjQKRTU3OTZjRkRaT0VnOGhsS3NwR04xeE85bDJUbkhqZjhlREpHVHI5U1JGcHROOUl1MEdQcHBCYThGdU1aaFAvSwp2S0FhRVNBT1NibjlIUGFxc0ZHeEZGUmNLU0ZRNFZnTFBRQmgrUUYyRGV6UjdwNzlpbXhOZFBwQlNJaWpaSlcyCm45Um80OXFuelZVYW1Lc0M5UkhWdnlRTCtGNktsdEsvN0ZwQlRQaFZBb0dBRzBQTG8xbWtSN0ZkMUFtOGc1UEIKbHpSMHJabFprbG1DNWVnQVFOb205d29iMXliL0ZqTEFPUVdWZGVnV2wrWTFPS2V0MjdtMUJxNkpzRkFaZUxldQpaSUliRWdxWVNVRytNczlkcmdQVkhtRU5wS1hwbURQdFFZa3ZRZEs0UWdHNTFVMU9CU3NGUnI5YjZjU2c3VTZOCnhqKysrQnpoZGVEc1Z4aEU1b1d5TWdFQ2dZRUFoaUg1VWtJQ0M2b3BUVHpDWXhvSXNtVUo3Q0dKYTZHOTN6Z0kKM3E1RzlQamdjbUdHWGMrRXFnTTVVLy9EOGRjck52OVJIdGpDUWY0NFhXR3FQV1JyZmlsaXVNOWdHTXNWalpraQpMNGRnUzRhK29Ud1lVRmJJRDkxcno0UU42NjJmbW1NeWN1bWxvdE1sdG9BTHhna0pyTGMrYjR3RitJSGsyM0ExCk4xRW82REVDZ1lFQW5BVitVak5KZjNtMCtvTElzajJkUUc3cEZQcGRMYTdKZUdvYlZPZzJ5cEFuWk03Unk4SHoKbmVFd3ExZHdSanU5cmdLbE40MXRyMnc4UGFtSm5leFd3cTlPNnU5aUxnRVNJV1A0UkVVclVEVDBjbjVQYUJVaQpFbWJ1VGtHVHpNckEySHZuRWVTbGN0ZkJtSmlCNjg3R2VYMVJFNkl0ek5JVTBURmgyeUYxa1p3PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUtCdEdxeWtSN09RNXVVRzR4V21FMWt3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl4TURreU1EQTNNRGN3TmxvWERUSXlNRGt5TURBMwpNRGN3Tmxvd0ZERVNNQkFHQTFVRUF4TUphR0Z5WW05eUxXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUEzL1J4RUtnOG9NU2V3aG50U0hZN2ZrZWcrTWNmNjlBVDlxM2ttWGVLZWkybkNSd3YKUDNpOFBZUFdGWDl6QnlCeG1WNjJ1VkVMc1lGTy92K1hUWTU2REEwWTYvbXhjK1RpcTRnYVlVdVlDSU5QQ1JPWQpERStMSlRBTXJjbzltYVpEUmRxZjVqMWlNclVWN01KaXlKcWExWDBkRDFHTjhVZ0U2L2RTQWhSRG5XeHRXbVNGClIyeGhWdGU0dnp3SnNIRThMc29wSHBYeHM4ODhkL2ZLczFsU2ZyRGpxdy9qZ1RGNjJkTVJSYlN2ZUxKZU5iUDMKc1U3OG5sRm8yRWp0NUtmblJRaGxwQkpsVFY3MFE1Z0hQbm9yZHFBVW9QKzYyeTExSmJkTHFTSnY5Q0graEJUSgpQOUdNL2ViOEpEa1dOTFVEUTNzTUJQYzcwbzI1MmZieTQ4VGpmd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSU45NWRqc0xSKzJQcms4eGZzdzhWT2tVcXVCTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQnhEdWNUVTMzSTVhUW56NVRiYm9MSC9EQnc3ZkowUmxhQ2RQWjdpRThlRi9pUWV5cElEVjNwCmZQN2xqc1E0UU05d1ZsVXRQd2hBZlNsZmJJY0M1R2FPSkJWdU94VThZREw2ZmJhbEZRL2tjTlFQQjVHZ3BGZDYKbmgyc3l4UGdCZE9vSzl2Tk55ZEoyWjhmOUNxMEluME9rYnh2aGF1eE5WZFhmRFZuNEc3Wm5ObnNVVk4yWHFVNgpaWkg2bFpqdU15TkRnQkdCM1pQSHA4L2Yvei8rZFRvN3IyVTVvS0VWTmFzdVlaMks2UFlHZUJPdDN3TXJWUzFvCjd4VHhvWnorUzBSV0hJdDR3Z04rLzk0S2lPUlJxZCtDTVZzbHVqajJPNURMQkY0bERCS3ZDUVdzaWVpRGJEN1UKTmtWQzdNaHBjeTB4Yy9Ia3YwRXE0YjJPL25PTks1MFgKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  JOBSERVICE_SECRET: "RlJYYjlCNnJ4UTBwREExYg=="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: harbor/templates/notary/notary-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-notary-server
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: notary
type: Opaque
data:
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJakNDQWdxZ0F3SUJBZ0lSQUt5VGU4WVVRMWhNT1NhK09pMVZvTHd3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRBZUZ3MHlNVEE1TWpBd056QTNNRFphRncweQpNakE1TWpBd056QTNNRFphTUJzeEdUQVhCZ05WQkFNVEVHaGhjbUp2Y2kxdWIzUmhjbmt0WTJFd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEQkIxS1k3R2FpbDVrOXNWaStaU2YzL05yVHMrOGIKcFgrajNKRmkyd0hmTG9JZE9oN0Fsb2JyOW5GNkYzeUNHbTQ0WjhUVSt3TEgyU2lVUTBsaGY1VjVVV0IwYlN6Tgp4TGdManlqUHgyYWN2SWdhZEo2Y29CYUFXbUhCK0lROE5mWFFCenpKcUpNWkpwM3EwYitXajhOblptSDdtYk1vCmppZWtDR1JJVmN1SVlpUGgrODd3aTYxMk1kNmdZREpqeG1KeXdZVzhIREdsRk9NcUIzVkFPcVpPNVVTT242ZXEKOFFGODkvTzNTTmx1bUI0ZDZaQ2N1aDJHbUk1WFBaWG1Ga0piWks3L04xQkVqRWRKMWRVMkVCdWVVUHZ3UFYwSQpqdEhIVHJjQjBXb3kyUkVicHlRTG13cUg2UVBPdFFMTXNqL0s5T1BjMEhzQnRSY3dRTTAxeDV2bEFnTUJBQUdqCllUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVTdjdkVMTjRpNXVDVC9JemFtZGJ0blcrMQpnNU13RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUY4bUVCVi9wYXdldXJSWVdpcFA4L3Rna2hRS3BJRDd1Y3NPCm9Tbk1CY0tjdkhWd0JndTg3UVZiekRzbCtoNXdXRlZ6R0MxYlVPRHpsWUViVXI0QXNnd0IzU25naVF5TGpJSUYKUll0VVFMN0liNEdTTzNpMXptdHkzMko5ZmFnK05ESlZCRzM0M2xUYmlzemowayt6UHkwNUlVdGtoemp4Wk95dApqbzhXc3JCaURFaG1KelVIRGdBZ2V2R29HaUJlaDJOQ1JqcnZRZTlTQTFmZ3pVZ0xrazlEc1dUeHZIRmZwRHJOClptNmZoUVByYVd4K01kN1NaUlNyalBrRlNHOXFRdEVveG5PYTk2aWRteHJsSVhkeGVlRGlUZDNOQU9XZHVJNEEKK1FuVncxYlg2YzRlY3drZHRDcUE2MFQvVFlPN2d3SU9ZZ3ZSakcvNm5ubW8vRi92bkpnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZVENDQWttZ0F3SUJBZ0lRRi9yZ0dtVVVRZHdIYlYwUE9oejZIakFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCb1lYSmliM0l0Ym05MFlYSjVMV05oTUI0WERUSXhNRGt5TURBM01EY3dObG9YRFRJeQpNRGt5TURBM01EY3dObG93TERFcU1DZ0dBMVVFQXhNaFVrVk1SVUZUUlMxT1FVMUZMV2hoY21KdmNpMXViM1JoCmNua3RjMmxuYm1WeU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdkJaZ00xNFYKOU5WeUpsV3ViTXV4TnZtdjZ6WGRQMXA5WDlwRW1pek81T1lZVXI0dnRVSUprODRpS2RRZmx0LzR3bXFzRElVSAppaHpaYjQ1YTIxQ09sM0pZWGdjamp0dW9iRHYxcHE2TkhLNGhYcFZPVVRvcmx4ajR5M25rVmY2WTdCaElDRzdCCjh0Ymc0dVVRM1k5SW1YNVN1M1c3OVY3d1RlU1hMTG9zNklWclJVYlF4RHVhLzRpd3I4OEJERy96SGZyOThHRWgKSzRRaHBzSUU4ZUl5cmlCY1NNQy9JZFhDQVdSYmxlOVJoY3IzdDg5aHI5MEo2enJjSEZmdFk2ODRPbDNGeFQwaAo4OXNJYW5TWStnOTNkZlpQUXhUOWpRYzlFMDdzYVdRbW5KSHltZEs5ejUrTFBROFJlMXdCbkEvU3hIRFIzZmRhCjBBT1ZGeWsxeCtuMUd3SURBUUFCbzRHUE1JR01NQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVUKQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JUdAp5OFFzM2lMbTRKUDhqTnFaMXUyZGI3V0RrekFzQmdOVkhSRUVKVEFqZ2lGU1JVeEZRVk5GTFU1QlRVVXRhR0Z5ClltOXlMVzV2ZEdGeWVTMXphV2R1WlhJd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFJR1BSTGFEWlV5RStlT2oKSkZqVS9Kc2toZjNCVWVjaCtyS1ZiVy83L2EwWTVSWUtyUkh6RDROVmVaazZwZkY5em90Z2RMa1dKUEhRTVR6RApmWllKSWpIbjVKM2h0Y0lUWXo1WHdlWjJDRjRpNHVaOTh4Rlh6Ym5iQ3RlOU10N09DNllKcnRtbHAyRmZ0cGpsCjhjbnpmeEdhY3RmS3FheVFhdndtaUl6UlFpclRmSjkrR0lRTzdGYStqVFo0azFmM040YjdqeURvMU1MVUQvVUYKL3V4dVpBWWl6SEU2WS9Vc2h1d3pBbDNtMjI0K1hRK0puWDI4VEFQVzM2R3o5TDgwSUp2NWZrRnlTUEZXeXJmcAprS2gyVStYd2h4M1kzd3g5WkF2aml6SFRhNmk3b2NGSXNRTHA0OWZTVElCTjZ2WnFKMGJkN3Z6aVIxaFNUUWo4CnR4Q25FMU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdkJaZ00xNFY5TlZ5SmxXdWJNdXhOdm12NnpYZFAxcDlYOXBFbWl6TzVPWVlVcjR2CnRVSUprODRpS2RRZmx0LzR3bXFzRElVSGloelpiNDVhMjFDT2wzSllYZ2NqanR1b2JEdjFwcTZOSEs0aFhwVk8KVVRvcmx4ajR5M25rVmY2WTdCaElDRzdCOHRiZzR1VVEzWTlJbVg1U3UzVzc5Vjd3VGVTWExMb3M2SVZyUlViUQp4RHVhLzRpd3I4OEJERy96SGZyOThHRWhLNFFocHNJRThlSXlyaUJjU01DL0lkWENBV1JibGU5UmhjcjN0ODloCnI5MEo2enJjSEZmdFk2ODRPbDNGeFQwaDg5c0lhblNZK2c5M2RmWlBReFQ5alFjOUUwN3NhV1FtbkpIeW1kSzkKejUrTFBROFJlMXdCbkEvU3hIRFIzZmRhMEFPVkZ5azF4K24xR3dJREFRQUJBb0lCQVFDZExDR1ZxMEN6eUkzTQpCUHR1Qk1VQkNLTjk3UlFHZGVxZzU3YytFc1dOTjg0SmpzNDFMSXJ1VFduMUJFS2xoR0hPck84Nnd3dXEyVExGCjZ2SjNwSmlUYThUMlJnYnJ3Umk3NFZzRXY0WkIraXorYWN2NVNwL1VjdFNzekI0SDBtb2RtS2pSQ3lUZGRieVYKUGcvYTVYb29jZ3hXaENyZC8walYvbmhwc3VZR0lzNHVMZEQ5WWN1YmVvck42bmFENGtDYUVHWmdxa2pscDkxRgpYTzdGVmR0UVJvbjdEUkxjWEVtcFRncjBXVENVVkovZHhJcmdnTlMxcE5oWHBLcENhWkc2elNSdDl3TFFGcWJ3Ckp4YnFMaHZOZVlkdmdtNHFiSm0yV0pVdnlSeWJOeU1OVTZFRFpOS2RqZjhleUxMWTdYMXZEVVZLZ2wyS1I5NnQKRS9uRG00bnBBb0dCQVBmUjh2WXB3TFRhaWRSZldybFZwR0lMVktrZ01XODlld0ZKWS9Ra1lYQ2taZzRUUXgrNAo4NnkzZGIyRlJIQ2JhUUFmUE9oWTRzVTNSRytIMmRMeGpzOHdLeXRRVUdZdXdvcG9QUTNxU1h4TUVUQWZMMVJMCjdMUjhOQUM3NGNib2taR2N0QTV3enFHNFEvTUV4Zk9VRFBCOTRFa0pPaW93V0czSGtBaHAyNSt0QW9HQkFNSkwKc1R4cGdaTUMrQkptcHZwYWs4NklMU3pSVjYyaEtoQThqNHQzTFBwcjRreXJFL1hWdUNFVzFPYldEL2hWSEQ3dApZNjhIODVuOHdzMnlFRVZ5UTFHbXg5WVZtc1dCcDNzZTU0UGdLSnFyWlhUUFdGVlJ3QzNjM3ZlcFdQbDNGLzBWCk1NRlExS2JaVnEyaXFieDdQSStqRUxvVk1DN1B5QTVxS1J4dHpHRG5Bb0dBRGFES0Q2ZDBKWDN2SG5Ldjlva3oKSlFFaWdycDJmWHVRREI0UkZSZjdFOHEyb2dlRkpYVnlVUWsxdkZwYnpTVit2TGI3RG52MDNJdVJnK0NncGUwSwp3WElRcmEwWS9zV0xoVGorUW9tanlPWVYrK043SXRPYURNTFh5VUtMdy9oK0tOZkpQeElOQ3UrckxPNFNSTGJiCmowNGN5MmRxZjI5eExYaFAvMlp5NFhFQ2dZQm51OTNlc1QzYTdhVGd2aW04Vkl2Qm92YnJqTUZSRkZETzVtYUYKUVpXa0JlR0dxWGc0c21oaVVqeE5HbERnZHlCamdIN09QbUtTL2w1TFVCeGIxNHVWbG9QdkN3M2RFVUlIL0JJRApXTFNWRDVsVmFqWnhKdnFDQWdDUkhidEJSWkpyTHRzZSt6YnQ5ZS9QT0orQzRCRVBaekpSQjJyNE16dE9adU9ZCktBOE1WUUtCZ0JQT1dyK21PclMwM3NUZENsaGhQZjFNL2dXWHM5cTVGSFRJT0ZVajVyRHRPWDVLdWZvdVpSTDAKMzNwaEZoeUFTSzU5TGNld1B6amNSczNMaENLODJ6bjFGajJRWDJabDhVSC9zUFFzRDBwRHhIY1dSMUE1dWJaYgp3YzJzTkFpdXlsTWE2VmtjcWZ2U3pySDFPaDIrelRVbzVjSW9nY3J5TllkVXhEMGY0TWpYCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  server.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiaHR0cF9hZGRyIjogIjo0NDQzIgogIH0sCiAgInRydXN0X3NlcnZpY2UiOiB7CiAgICAidHlwZSI6ICJyZW1vdGUiLAogICAgImhvc3RuYW1lIjogIlJFTEVBU0UtTkFNRS1oYXJib3Itbm90YXJ5LXNpZ25lciIsCiAgICAicG9ydCI6ICI3ODk5IiwKICAgICJ0bHNfY2FfZmlsZSI6ICIvZXRjL3NzbC9ub3RhcnkvY2EuY3J0IiwKICAgICJrZXlfYWxnb3JpdGhtIjogImVjZHNhIgogIH0sCiAgImxvZ2dpbmciOiB7CiAgICAibGV2ZWwiOiAiaW5mbyIKICB9LAogICJzdG9yYWdlIjogewogICAgImJhY2tlbmQiOiAicG9zdGdyZXMiLAogICAgImRiX3VybCI6ICJwb3N0Z3JlczovL3Bvc3RncmVzOmNoYW5nZWl0QFJFTEVBU0UtTkFNRS1oYXJib3ItZGF0YWJhc2U6NTQzMi9ub3RhcnlzZXJ2ZXI/c3NsbW9kZT1kaXNhYmxlIgogIH0sCiAgImF1dGgiOiB7CiAgICAidHlwZSI6ICJ0b2tlbiIsCiAgICAib3B0aW9ucyI6IHsKICAgICAgInJlYWxtIjogImh0dHBzOi8vaGFyYm9yLnQua2hzMTk5NC5jb206Mjg0NDMvc2VydmljZS90b2tlbiIsCiAgICAgICJzZXJ2aWNlIjogImhhcmJvci1ub3RhcnkiLAogICAgICAiaXNzdWVyIjogImhhcmJvci10b2tlbi1pc3N1ZXIiLAogICAgICAicm9vdGNlcnRidW5kbGUiOiAiL3Jvb3QuY3J0IgogICAgfQogIH0KfQ==
  signer.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiZ3JwY19hZGRyIjogIjo3ODk5IiwKICAgICJ0bHNfY2VydF9maWxlIjogIi9ldGMvc3NsL25vdGFyeS90bHMuY3J0IiwKICAgICJ0bHNfa2V5X2ZpbGUiOiAiL2V0Yy9zc2wvbm90YXJ5L3Rscy5rZXkiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6Y2hhbmdlaXRAUkVMRUFTRS1OQU1FLWhhcmJvci1kYXRhYmFzZTo1NDMyL25vdGFyeXNpZ25lcj9zc2xtb2RlPWRpc2FibGUiLAogICAgImRlZmF1bHRfYWxpYXMiOiAiZGVmYXVsdGFsaWFzIgogIH0KfQ==
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "V1R1N0dRakNiRVVNMVFSUA=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-registry-htpasswd"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJ5JDEwJDlMNFRjMERKYkZGTUI2UmRTQ3Vuck9wVEhkd2hpZDRrdEJKbUxEMDBiWWdxa2tHT3ZsbDNt"
---
# Source: harbor/templates/trivy/trivy-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-trivy
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  redisURL: cmVkaXM6Ly9SRUxFQVNFLU5BTUUtaGFyYm9yLXJlZGlzOjYzNzkvNT9pZGxlX3RpbWVvdXRfc2Vjb25kcz0zMA==
  gitHubToken: ""
---
# Source: harbor/templates/chartmuseum/chartmuseum-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  PORT: "9999"
  CACHE: "redis"
  CACHE_REDIS_ADDR: "harbor-redis:6379"
  CACHE_REDIS_DB: "3"
  BASIC_AUTH_USER: "chart_controller"
  DEPTH: "1"
  DEBUG: "false"
  LOG_JSON: "true"
  DISABLE_METRICS: "false"
  DISABLE_API: "false"
  DISABLE_STATEFILES: "false"
  ALLOW_OVERWRITE: "true"
  AUTH_ANONYMOUS_GET: "false"
  CONTEXT_PATH: ""
  INDEX_LIMIT: "0"
  MAX_STORAGE_OBJECTS: "0"
  MAX_UPLOAD_SIZE: "20971520"
  CHART_POST_FORM_FIELD_NAME: "chart"
  PROV_POST_FORM_FIELD_NAME: "prov"
  STORAGE: "local"
  STORAGE_LOCAL_ROOTDIR: "/chart_storage"
  STORAGE_TIMESTAMP_TOLERANCE: 1s
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080
  PORT: "8080"
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  EXT_ENDPOINT: "https://harbor.t.khs1994.com:28443"
  CORE_URL: "http://harbor-core:80"
  JOBSERVICE_URL: "http://harbor-jobservice"
  REGISTRY_URL: "http://harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://harbor-core:80/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://harbor-notary-server:4443"
  CORE_LOCAL_URL: "http://127.0.0.1:8080"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  WITH_CHARTMUSEUM: "true"
  CHART_REPOSITORY_URL: "http://harbor-chartmuseum"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL_CORE: "redis://harbor-redis:6379/0?idle_timeout_seconds=30"
  _REDIS_URL_REG: "redis://harbor-redis:6379/2?idle_timeout_seconds=30"
  PORTAL_URL: "http://harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal"
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: "docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry"
---
# Source: harbor/templates/jobservice/jobservice-cm-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-jobservice-env"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  CORE_URL: "http://harbor-core:80"
  TOKEN_SERVICE_URL: "http://harbor-core:80/service/token"
  REGISTRY_URL: "http://harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
---
# Source: harbor/templates/portal/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: harbor-redis:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"
---
# Source: harbor/templates/chartmuseum/chartmuseum-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 9999
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: chartmuseum
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-web
      port: 80
      targetPort: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-jobservice
      port: 80
      targetPort: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-notary-server
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 4443
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: notary-server
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-notary-signer
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 7899
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: notary-signer
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-redis
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-registry
      port: 5000

    - name: http-controller
      port: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: registry
---
# Source: harbor/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-trivy"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-trivy
      protocol: TCP
      port: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: trivy
---
# Source: harbor/templates/chartmuseum/chartmuseum-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: chartmuseum
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: chartmuseum
      annotations:
        checksum/configmap: 323ecc2bc644bcd639bad5cb17113644ed57fc03cd350d867593d9a5360e0b39
        checksum/secret: eedbdc2cec3014448f8a4a11a2e66285ed85bf31db6653175f19c39376e852af
        checksum/secret-core: 9adc6a8df4a03461507d36322302404c08e80b9893e87fcbe1766e51e509730a
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
      - name: chartmuseum
        image: goharbor/chartmuseum-photon:v2.3.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            scheme: HTTP
            port: 9999
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            scheme: HTTP
            port: 9999
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-chartmuseum"
        - secretRef:
            name: "harbor-chartmuseum"
        env:
          - name: BASIC_AUTH_PASS
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
          - # Needed to make AWS' client connect correctly (see https://github.com/helm/chartmuseum/issues/280)
            name: AWS_SDK_LOAD_CONFIG
            value: "1"
        ports:
        - containerPort: 9999
        volumeMounts:
        - name: chartmuseum-data
          mountPath: /chart_storage
          subPath: chartmuseum
      volumes:
      - name: chartmuseum-data
        persistentVolumeClaim:
          claimName: harbor
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: RELEASE-NAME
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: b67c04fdd82973ef96fa8018309c584de9d53aa0400b8365d9cca467f9c34167
        checksum/secret: a50e5eee60b57f85916a92f754621911188e72cbd45c56a1f7d61fb0a6af0f66
        checksum/secret-jobservice: 9050ed7398940774a5d051311313287c8698c7d6b6391e4741b2c2809e3b104c
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: core
        image: goharbor/harbor-core:v2.3.2
        imagePullPolicy: IfNotPresent
        startupProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 360
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-core"
        - secretRef:
            name: "harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-jobservice"
                key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: harbor-core
      - name: ca-download
        secret:
          secretName: "harbor-ingress"
      - name: psc
        emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: 33e26389f25fc8ab71d0dc18323c3f6fe92c29b3cee301eec372e3e6d7bdfd2b
        checksum/configmap-env: b307cd96d04104d5b50a5b1e749159f9dde0126b522acc3056f04012b1282e64
        checksum/secret: 8b71720bd69bfa79370b0e960f6e61b0aa3e4a08722f6be23f9aaea39caa7907
        checksum/secret-core: c01586b20521ad21d6c48fea76be725406a1e1603e3604ed74eec53b406c37ea
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v2.3.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
        envFrom:
        - configMapRef:
            name: "harbor-jobservice-env"
        - secretRef:
            name: "harbor-jobservice"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: jobservice
      volumes:
      - name: jobservice-config
        configMap:
          name: "harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: harbor
---
# Source: harbor/templates/notary/notary-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-notary-server
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: notary-server
      annotations:
        checksum/secret: 8ff6a6d77833532a60a8549104a6844afbb1824715de4e986bff5bd478fd5e6a
        checksum/secret-core: 08bbd22382324220d7ee50f29d54024b1d03d14cbcfa7716fec1aa9a4a2c289b
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
      - name: notary-server
        image: goharbor/notary-server-photon:v2.3.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /_notary_server/health
            scheme: "HTTP"
            port: 4443
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /_notary_server/health
            scheme: "HTTP"
            port: 4443
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
        - name: MIGRATIONS_PATH
          value: migrations/server/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-database:5432/notaryserver?sslmode=disable
        volumeMounts:
        - name: config
          mountPath: /etc/notary/server-config.postgres.json
          subPath: server.json
        - name: token-service-certificate
          mountPath: /root.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/ca.crt
          subPath: ca.crt
      volumes:
      - name: config
        secret:
          secretName: "harbor-notary-server"
      - name: token-service-certificate
        secret:
          secretName: harbor-core
      - name: signer-certificate
        secret:
          secretName: harbor-notary-server
---
# Source: harbor/templates/notary/notary-signer.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-notary-signer
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: notary-signer
      annotations:
        checksum/secret: c24504bd8e91f5430817b8142119821f3891d5c5a545b5a54af83696f2a72889
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
      - name: notary-signer
        image: goharbor/notary-signer-photon:v2.3.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: "HTTPS"
            port: 7899
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: "HTTPS"
            port: 7899
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
        - name: MIGRATIONS_PATH
          value: migrations/signer/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-database:5432/notarysigner?sslmode=disable
        - name: NOTARY_SIGNER_DEFAULTALIAS
          value: defaultalias
        volumeMounts:
        - name: config
          mountPath: /etc/notary/signer-config.postgres.json
          subPath: signer.json
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.key
          subPath: tls.key
      volumes:
      - name: config
        secret:
          secretName: "harbor-notary-server"
      - name: signer-certificate
        secret:
          secretName: harbor-notary-server
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: RELEASE-NAME
        app: "harbor"
        component: portal
      annotations:
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
      - name: portal
        image: goharbor/harbor-portal:v2.3.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: portal-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: portal-config
        configMap:
          name: "harbor-portal"
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: 2bfd0a1c40e9fc030488d6de0af71241d6e89f6e8c153d028bb96d120e1d853b
        checksum/secret: a81491682b07ff35f46e58fd0931415c75cfaa8a1b9bc2daa962ffac8efcd370
        checksum/secret-jobservice: 0cb52641f8c1ebb1c5c6adcb66d19e11071b84a2cf7e5d4934e11a7f70973615
        checksum/secret-core: f4102478c440dab50f99f49eb334794d20b7560a96163a7d984efe3cdd9b7a53
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: registry
        image: goharbor/registry-photon:v2.3.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-registry"
        env:
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: registry
        - name: registry-htpasswd
          mountPath: /etc/registry/passwd
          subPath: passwd
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:v2.3.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - secretRef:
            name: "harbor-registry"
        env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              name: harbor-core
              key: secret
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              name: harbor-jobservice
              key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: registry
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-htpasswd
        secret:
          secretName: harbor-registry-htpasswd
          items:
            - key: REGISTRY_HTPASSWD
              path: passwd
      - name: registry-config
        configMap:
          name: "harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: harbor
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "harbor-database"
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: 90e0d57ebc6da6126ee1a270482b27747d8dede1c6ae5c371fafa2157b82cb87
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      initContainers:
      # as we change the data directory to a sub folder to support psp, the init container here
      # is used to migrate the existing data. See https://github.com/goharbor/harbor-helm/issues/756
      # for more detail.
      # we may remove it after several releases
      - name: "chown"
        image: goharbor/harbor-db:v2.3.2
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "chown 999:999 /var/lib/postgresql/data"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath:
        securityContext:
          runAsUser: 0
          runAsGroup: 0
      - name: "data-migrator"
        image: goharbor/harbor-db:v2.3.2
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "[ -e /var/lib/postgresql/data/postgresql.conf ] && [ ! -d /var/lib/postgresql/data/pgdata ] && mkdir -m 0700 /var/lib/postgresql/data/pgdata && mv /var/lib/postgresql/data/* /var/lib/postgresql/data/pgdata/ || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath:
      # with "fsGroup" set, each time a volume is mounted, Kubernetes must recursively chown() and chmod() all the files and directories inside the volume
      # this causes the postgresql reports the "data directory /var/lib/postgresql/data/pgdata has group or world access" issue when using some CSIs e.g. Ceph
      # use this init container to correct the permission
      # as "fsGroup" applied before the init container running, the container has enough permission to execute the command
      - name: "data-permissions-ensurer"
        image: goharbor/harbor-db:v2.3.2
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "chmod -R 700 /var/lib/postgresql/data/pgdata || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath:
      containers:
      - name: database
        image: goharbor/harbor-db:v2.3.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
          - secretRef:
              name: "harbor-database"
        env:
          # put the data into a sub directory to avoid the permission issue in k8s with restricted psp enabled
          # more detail refer to https://github.com/goharbor/harbor-helm/issues/756
          - name: PGDATA
            value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath:
        - name: shm-volume
          mountPath: /dev/shm
      volumes:
      - name: shm-volume
        emptyDir:
          medium: Memory
          sizeLimit: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-redis
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: harbor-redis
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: redis
        image: goharbor/redis-photon:v2.3.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath:
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-trivy
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: trivy
spec:
  replicas: 1
  serviceName: harbor-trivy
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: trivy
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: trivy
      annotations:
        checksum/secret: 7e11ee3d2d80064b31efb1cf7ec39ef9b22d0a8eee92b100ec6eaab3e2c03b91
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: trivy
          image: goharbor/trivy-adapter-photon:v2.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: "harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal"
            - name: "SCANNER_LOG_LEVEL"
              value: "info"
            - name: "SCANNER_TRIVY_CACHE_DIR"
              value: "/home/scanner/.cache/trivy"
            - name: "SCANNER_TRIVY_REPORTS_DIR"
              value: "/home/scanner/.cache/reports"
            - name: "SCANNER_TRIVY_DEBUG_MODE"
              value: "false"
            - name: "SCANNER_TRIVY_VULN_TYPE"
              value: "os,library"
            - name: "SCANNER_TRIVY_GITHUB_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: gitHubToken
            - name: "SCANNER_TRIVY_SEVERITY"
              value: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
            - name: "SCANNER_TRIVY_IGNORE_UNFIXED"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_INSECURE"
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: ":8080"
            - name: "SCANNER_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: redisURL
            - name: "SCANNER_STORE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: redisURL
            - name: "SCANNER_JOB_QUEUE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: redisURL
          ports:
            - name: api-server
              containerPort: 8080
          volumeMounts:
          - name: data
            mountPath: /home/scanner/.cache
            subPath:
            readOnly: false
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "5Gi"
