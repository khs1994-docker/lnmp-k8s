version: ~> 1.0

language: go
# language: bash

go:
- 1.15

services:
- docker

os: linux
dist: focal
# dist: bionic

cache:
  directories:
    - kubernetes-release/release
    - /home/travis/.khs1994-docker-lnmp/caches

# git:
#   clone: false

before_install:
  - uname -a
  - sudo mount bpffs /sys/fs/bpf -t bpf || true
  - sudo mount -t bpf || true
  - sudo cat /proc/sys/net/ipv6/conf/all/disable_ipv6 || true
  - ip addr
  - sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
  - ip addr
  - env

  - sudo update-alternatives --display iptables || true
  - sudo update-alternatives --list    iptables || true

  - jq --version || true
  - docker-compose --version || true

  - sudo apt-get update || true
  - |
    sudo apt install -y \
        tree \
        net-tools \
        libffi-dev \
        jq
  - jq --version || true
  - docker-compose --version || true
  - |
    if [ $(go env GOARCH) = "arm64" ];then
      sudo rm -rf $(command -v docker-compose) || true
    fi
  # /home/travis/build/khs1994-docker/lnmp-k8s
  # /home/travis/gopath/src/github.com/[secure]-docker/lnmp-k8s
  - ifconfig || true
  - pwd
  - df -h
  - git clone --depth=1 -b ${LNMP_BRANCH} https://github.com/khs1994-docker/lnmp ~/lnmp
  - cp -r ~/lnmp/. ~/gopath/src/github.com/khs1994-docker
  - ls -la ~/gopath/src/github.com/khs1994-docker
  - |
    # if [ $(go env GOARCH) = "arm64" ];then
      $HOME/gopath/src/github.com/khs1994-docker/lnmp-docker compose --official -f
    # fi
  # remove some apt source
  - cat /etc/apt/sources.list
  - ls /etc/apt/sources.list.d || true
  - sudo rm -rf /etc/apt/sources.list.d/pgdg.list || true

  - sudo sestatus || true
  - ls /home/travis/.khs1994-docker-lnmp/caches
  - echo $PATH

  # https://github.com/kubernetes/kubeadm/issues/273
  # 16.04 not use systemd-resolved
  # 18.04 use systemd-resolved
  # - systemctl is-active systemd-resolved || REPLACE_KUBELET_RESOLV_CONF=false
  - sudo netstat -lnpt
  - cat /etc/resolv.conf
  - cat /run/systemd/resolve/resolv.conf || true
  # - cat /etc/systemd/resolved.conf || true
  # - sudo systemd-resolve --status || true
  # - sudo systemctl status systemd-resolved || true
  # - sudo systemctl stop systemd-resolved || true
  # - sudo netstat -lnpt
  # - cat /etc/resolv.conf
  - |
    if [ $(go env GOARCH) = "amd64" ];then
      echo "nameserver 169.254.169.254" | sudo tee /etc/resolv.conf
      echo "search google.internal" | sudo tee -a /etc/resolv.conf
    else
      sudo cp -f /run/systemd/resolve/resolv.conf /etc/resolv.conf || true
    fi
  - cat /etc/resolv.conf
  # - cat /etc/resolv.conf
  - nslookup gcr.io

  - docker-compose --version
  - docker --version
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  - sudo add-apt-repository "deb [arch=$(go env GOARCH)] https://download.docker.com/linux/ubuntu $(lsb_release -cs) test"
  - sudo apt-get update || true
  - apt-cache madison docker-ce | grep ${LNMP_BRANCH}
  - DOCKER_VERSION=$(apt-cache madison docker-ce | grep ${LNMP_BRANCH} | head -n 1 | cut -d "|" -f 2 | sed s/[[:space:]]//g)
  - echo ${DOCKER_VERSION}
  - sudo apt-get -y install docker-ce=${DOCKER_VERSION} docker-ce-cli=${DOCKER_VERSION} || sudo apt -f install
  - docker --version
  - docker info
  # 升级最新 Docker Compose
  # - docker-compose --version
  # - sudo rm /usr/local/bin/docker-compose
  # - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION:-1.27.0}/docker-compose-`uname -s`-`uname -m` > docker-compose
  # - sudo install -m755 docker-compose /usr/local/bin
  # - docker-compose --version
  - sudo cat /etc/docker/daemon.json
  - echo '{"registry-mirrors":["https://mirror.gcr.io"]}' | sudo tee /etc/docker/daemon.json
  - sudo cat /etc/docker/daemon.json
  # - docker run --rm --privileged tonistiigi/binfmt:latest --install all
  # - ls -la /proc/sys/fs/binfmt_misc/qemu-aarch64
  # - docker buildx create --name mybuilder
  # - docker buildx use mybuilder
  # - docker buildx inspect --bootstrap
  - ip addr
  - hostnamectl
  - |
    export net_interface=ens4

    if [ $(go env GOARCH) = "arm64" ];then
      export net_interface=ens5
    fi

    if [ "${IPV6}" = "true" ];then
      export net_interface=eth0
    fi

  - echo $net_interface
  - export SERVER_IP=`ifconfig ${net_interface} | grep "inet" | awk '{ print $2}' | head -1`
  - if [ -z "${SERVER_IP}" ];then exit 1; fi
  - ./lnmp-k8s > /dev/null
  - echo $SERVER_IP
install:
  # - travis_retry echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
  # - travis_retry echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME_CCR} --password-stdin uswccr.ccs.tencentyun.com
  # - export KUBERNETES_TYPE=server
  - sed -i "s!192.168.199.100!${SERVER_IP}!g" systemd/.env
  - sed -i "s#/opt/k8s#${K8S_ROOT:-/opt/k8s}#g" systemd/.env
  # - test -n "${TRAVIS_TAG}" && ./lnmp-k8s _build_k8s_image || true
  - cat systemd/.env
  - sudo hostnamectl set-hostname node1
  - echo "${SERVER_IP} node1" | sudo tee -a /etc/hosts
  - sudo cat /etc/hosts || true

  - docker-compose up cfssl-local
  - docker-compose down
  # - source .env
  - ls kubernetes-release/release/v${CI_KUBERNETES_VERSION}-linux-$(go env GOARCH)/kubernetes/server/bin/kubectl || rm -rf kubernetes-release/release/v${CI_KUBERNETES_VERSION}-linux-$(go env GOARCH)

  - sudo sed -i "s#^LNMP_CN_ENV=.*#LNMP_CN_ENV=false#g" ./.env

  - travis_retry ./lnmp-k8s kubernetes-server ${LNMP_K8S_GET}
  - ./lnmp-k8s local-install ${LNMP_K8S_LOCAL_INSTALL_OPTIONS:-}
  # - debug=1 ./lnmp-k8s local-install ${LNMP_K8S_LOCAL_INSTALL_OPTIONS:-}

  - export PATH=$PATH:${K8S_ROOT:-/opt/k8s}/bin
  - tree kubernetes-release/release/v${CI_KUBERNETES_VERSION}-linux-$(go env GOARCH)/kubernetes
before_script:
  - ls -lat /etc/systemd/system/

  - sudo systemctl cat etcd
  - sudo systemctl start etcd || CMD_FAILED=1
  - test -n "$CMD_FAILED" && sudo journalctl -u etcd || true
  - test -n "$CMD_FAILED" && false || true
  # master
  - sudo systemctl cat kube-apiserver
  - sudo systemctl start kube-apiserver || CMD_FAILED=1
  - test -n "$CMD_FAILED" && sudo journalctl -u kube-apiserver || true
  - test -n "$CMD_FAILED" && false || true

  - sudo systemctl cat kube-controller-manager
  - sudo systemctl start kube-controller-manager || CMD_FAILED=1
  - test -n "$CMD_FAILED" && sudo journalctl -u kube-controller-manager || true
  - test -n "$CMD_FAILED" && false || true

  - sudo systemctl cat kube-scheduler
  - |
    if [ $(echo "${CI_KUBERNETES_VERSION}" | cut -d '.' -f 2) -ge 19 ];then \
      echo "replace kube-scheduler config version" \
      && echo "remove it when k8s version ge 1.19" \
      && sudo sed -i "s#kubescheduler.config.k8s.io/v1alpha1#kubescheduler.config.k8s.io/v1beta1#g" ${K8S_ROOT:-/opt/k8s}/etc/kubernetes/kube-scheduler.config.yaml ; \
    fi
  - sudo systemctl start kube-scheduler || CMD_FAILED=1
  - test -n "$CMD_FAILED" && sudo journalctl -u kube-scheduler || true
  - test -n "$CMD_FAILED" && false || true
  # worker
  - sudo systemctl cat kube-proxy
  - |
    if ! [ "$CNI_CALICO_EBPF" = 'true' ];then
      sudo systemctl start kube-proxy || CMD_FAILED=1
    fi
  - test -n "$CMD_FAILED" && sudo journalctl -u kube-proxy || true
  - test -n "$CMD_FAILED" && false || true

  - sudo systemctl cat docker

  - sudo systemctl cat cri-containerd@1.4

  - sudo systemctl cat cri-o || true
  - sudo cat /etc/sysconfig/crio || true
  - sudo cat ${K8S_ROOT:-/opt/k8s}/etc/sysconfig/crio || true
  - /usr/local/bin/crio --config=/etc/crio/crio.conf config > crio.conf || true
  - /usr/local/bin/crio config --default > crio.default.conf || true
  - cat crio.conf || true
  - diff crio.conf crio.default.conf || true
  - ls -R /etc/crio/crio.conf.d || true
  - cat /etc/crio/crio.conf.d/00-default.conf || true
  - echo "!! crio.conf.d 中的文件会覆盖 /etc/crio/crio.conf 中的配置，这里删除 !!" > /dev/null
  - echo "!! 所有的配置均在 /etc/crio/crio.conf 中进行配置                    !!" > /dev/null
  - sudo rm -rf /etc/crio/crio.conf.d/00-default.conf || true

  - |
    test -z "${LNMP_K8S_LOCAL_INSTALL_OPTIONS}" \
      && (sudo systemctl daemon-reload ; sudo systemctl start cri-containerd@1.4) || true
  - |
    test "${LNMP_K8S_LOCAL_INSTALL_OPTIONS}" = "--docker" \
      && (sudo systemctl restart docker || sudo journalctl -u docker) || true
  - |
    test "${LNMP_K8S_LOCAL_INSTALL_OPTIONS}" = "--crio" \
      && (/usr/local/bin/crio --help; sudo systemctl daemon-reload ; \
          sudo systemctl start cri-o) || true
  - |
    test -z "${LNMP_K8S_LOCAL_INSTALL_OPTIONS}" \
      && export KUBELET_SERVICE='@cri-containerd' || true

    test "${LNMP_K8S_LOCAL_INSTALL_OPTIONS}" = "--crio" \
      && export KUBELET_SERVICE='@crio' || true

    echo kubelet${KUBELET_SERVICE}

  - docker info

  - sleep 10
  - sudo systemctl cat kubelet${KUBELET_SERVICE}
  - sudo systemctl start kubelet${KUBELET_SERVICE} || CMD_FAILED=1
  - test -n "$CMD_FAILED" && sudo journalctl -u kubelet${KUBELET_SERVICE} || true
  - test -n "$CMD_FAILED" && false || true

  - sleep 10
  # - sudo systemctl status etcd
  # - sudo systemctl status docker
  # - sudo systemctl status kube-apiserver
  # - sudo systemctl status kube-controller-manager
  # - sudo systemctl status kube-scheduler
  # - sudo systemctl status kube-proxy
  # - sudo systemctl status kubelet${KUBELET_SERVICE}

  - travis_retry kubectl version
  - kubectl cluster-info

  - sleep 30

  - sudo journalctl -u etcd
  - sudo journalctl -u kube-apiserver
  - sudo journalctl -u kube-controller-manager
  - sudo journalctl -u kube-scheduler

  - sudo journalctl -u kube-proxy
  - sudo journalctl -u kubelet${KUBELET_SERVICE}
  - sudo journalctl -u cri-containerd@1.4 || true
  - sudo journalctl -u cri-o || true

  - kubectl get csr
  - CSR_NAME=`kubectl get csr | grep system:node:node1 | awk '{print $1}' | head -1`
  - echo ${CSR_NAME}
  - kubectl certificate approve $CSR_NAME
  - kubectl get csr

  - sed -i "s#/opt/k8s#${K8S_ROOT:-/opt/k8s}#g" addons/cni/calico-custom/custom.patch.json
  - sed -i "s#eth0#${net_interface}#g" addons/cni/calico-custom/custom.patch.json
  - |
    if [ "${IPV6}" = 'true' ];then
      sed -i -e "s#_IP6#IP6#g" \
             -e "s#_FELIX_IPV6SUPPORT#FELIX_IPV6SUPPORT#g" \
          addons/cni/calico-custom/custom.patch.json

      sed -i 's#assign_ipv6": "false#assign_ipv6": "true#g' \
          addons/cni/calico/calico.yaml
    fi
  - git diff
  - |
    if [ "$CNI_CALICO_EBPF" = 'true' ];then
      cat addons/cni/calico-eBPF/kubernetes.yaml \
          | sed -e "s/wsl2.k8s.khs1994.com/${SERVER_IP}/g" \
          | kubectl apply -f -
      kubectl apply -k addons/cni/calico-eBPF
    else
      kubectl apply -k addons/cni/calico-custom
    fi

  - kubectl get node
  - kubectl get all -A
  - kubectl api-versions
  - kubectl api-resources

  - sleep 40
  - kubectl get all -A
  - kubectl describe pod -n kube-system -l k8s-app=calico-kube-controllers
  - ip addr

  - sleep 40
  - kubectl get all -A
  - ip addr

  - sudo journalctl -u cri-o || true

  # - if [ "${LNMP_K8S_LOCAL_INSTALL_OPTIONS}" = "--crio" ];then sudo systemctl restart cri-o && sudo systemctl restart kubelet@crio ;fi

  - sleep 20
  - kubectl get all -A

  - kubectl describe pod -n kube-system -l k8s-app=calico-kube-controllers
  - kubectl describe pod -n kube-system -l k8s-app=calico-node
  - sudo crictl logs $(sudo crictl ps -a --label io.kubernetes.container.name=calico-kube-controllers -q) || true
  - sudo crictl logs $(sudo crictl ps -a --label io.kubernetes.container.name=calico-node -q) || true
  - for id in $(sudo crictl ps -a -q);do sudo crictl logs $id;done || true
script:
  - df -h
  - kubectl apply -k addons/coredns
  - kubectl apply -k addons/dashboard
  - kubectl apply -k addons/metrics-server
  - kubectl apply -k addons/ingress/nginx/nodeport

  - sleep 100

  - df -h
  - kubectl get all --all-namespaces
  # test metrics server
  - travis_retry kubectl top node
  # test dns
  - kubectl describe pod coredns -n kube-system
  - kubectl logs $(kubectl describe pod coredns -n kube-system | grep "Name:" | head -1 | awk '{ print $2}') -n kube-system
  - kubectl run nginx --image nginx:1.19.3-alpine
  - sleep 20
  - kubectl get all
  - kubectl get pod -o wide
  - NGINX_POD_NAME=`kubectl get pod | awk '{print $1}' | tail -1`
  - kubectl describe pod/${NGINX_POD_NAME}
  - kubectl logs ${NGINX_POD_NAME}
  - kubectl exec ${NGINX_POD_NAME} -- ip addr
  - kubectl exec ${NGINX_POD_NAME} -- cat /etc/resolv.conf
  - kubectl exec ${NGINX_POD_NAME} -- ping -c 5 kubernetes || kubectl exec ${NGINX_POD_NAME} -- nslookup kubernetes || true
  - kubectl exec ${NGINX_POD_NAME} -- ping -c 5 github.com || kubectl exec ${NGINX_POD_NAME} -- nslookup github.com
  - kubectl exec ${NGINX_POD_NAME} -- curl -k https://kubernetes/api || true

  - kubectl expose pod/${NGINX_POD_NAME} --port=80
  - sleep 2 ; NGINX_SERVICE_NAME=$(echo $(kubectl get svc | grep nginx | awk '{ print $1 }' | cut -d "/" -f 2))
  - echo $NGINX_SERVICE_NAME
  - echo $NGINX_POD_NAME
  - kubectl get all
  - kubectl exec ${NGINX_POD_NAME} -- curl $NGINX_SERVICE_NAME || true

  - test "${LNMP_K8S_GET}" = "--url" && sudo rm -rf kubernetes-release/release/ || true
after_success:
  - kubectl get svc/${NGINX_SERVICE_NAME} -o yaml
  - kubectl get deployment/nginx -o yaml || true
  - kubectl get pod/${NGINX_POD_NAME} -o yaml

  - kubectl delete svc/${NGINX_SERVICE_NAME}
  # ipv6 svc
  - kubectl apply -f demo/ipv6

  - kubectl get svc/nginx -o yaml
  - kubectl get deployment/nginx -o yaml || true
  - kubectl get pod/${NGINX_POD_NAME} -o yaml

  - |
    if [ "${IPV6}" = 'true' ];then
      set -x
      POD_IPV4_IP=`kubectl get pod/${NGINX_POD_NAME} -o go-template="{{(index .status.podIPs 0).ip}}"`
      curl ${POD_IPV4_IP}:80 || true

      POD_IPV6_IP=`kubectl get pod/${NGINX_POD_NAME} -o go-template="{{(index .status.podIPs 1).ip}}"` || true
      curl [${POD_IPV6_IP}]:80 || true

      CLUSTER_IPV6_IP=`kubectl get svc/nginx -o go-template="{{ .spec.clusterIP }}"`
      curl [${CLUSTER_IPV6_IP}]:80 || true

      NODE_IPV6_IP=`ifconfig ${net_interface} | grep "inet6" | awk '{ print $2}' | head -1`
      curl [${NODE_IPV6_IP}]:8080 || true
    fi

  - kubectl delete svc nginx || true
  - kubectl delete deployment nginx || true
  - kubectl delete pod ${NGINX_POD_NAME} || true
  - kubectl get all
  # test ingress-nginx
  - HTTP_PORT=`kubectl get service -n ingress-nginx | grep ingress-nginx | grep NodePort | awk '{print $5}' | cut -d ':' -f 2 | cut -d / -f 1`
  - curl --version
  - curl ${SERVER_IP}:${HTTP_PORT}

  - sudo crictl version
  - sudo crictl info
  - ip addr
  - git diff
  - cd cli ; (sh generate.sh || true); cd ..
  - git diff
  - sudo netstat -lnpt
  - ./tests/test.sh

  - sudo crictl version
  - sudo crictl info
  - sudo ls -lat /opt || true
  - sudo ls -lat /opt/k8s || true
  - sudo ls -lat ${K8S_ROOT:-/opt/k8s} || true
  - sudo tree ${K8S_ROOT:-/opt/k8s} -L 5 || true
  - sudo tree /var/log -L 3 || true
  - sudo tree /var/log/pods -L 10 || true
  - sudo tree /var/run -L 3 || true

  - kubectl get node -o yaml

  - sudo ps aux

  - |
    BASE_BRANCH=master
    if [ $CI_KUBERNETES_VERSION = '1.19.0' -a "$GENERATE_CLI_HELP" = "true" ];then
      set -x
      cd /tmp
      git clone -b ${BASE_BRANCH} --depth=3 https://khs1994:${GITHUB_TOKEN}@github.com/khs1994-docker/lnmp-k8s
      cd lnmp-k8s

      stty size
      stty cols 200

      # sudo sed -i "s#^LNMP_CN_ENV=.*#LNMP_CN_ENV=true#g" ./.env
      cd cli ; (COLUMNS=200 sh generate.sh || true); cd ..

      git add .
      git commit -m "Update v$CI_KUBERNETES_VERSION config"
      git push origin ${BASE_BRANCH}:v$CI_KUBERNETES_VERSION-config -f

      cd /tmp
      rm -rf lnmp-k8s
    fi
  - |
    BASE_BRANCH=v1.19.0-config
    BASE_BRANCH=master
    if [ $CI_KUBERNETES_VERSION = '1.20.0-beta.0' ];then
      set -x
      cd /tmp
      rm -rf lnmp-k8s
      git clone -b ${BASE_BRANCH} --depth=3 https://khs1994:${GITHUB_TOKEN}@github.com/khs1994-docker/lnmp-k8s
      cd lnmp-k8s

      stty size
      stty cols 200

      # sudo sed -i "s#^LNMP_CN_ENV=.*#LNMP_CN_ENV=true#g" ./.env
      cd cli ; (COLUMNS=200 sh generate.sh || true); cd ..

      git add .
      git commit -m "Update v$CI_KUBERNETES_VERSION config"
      git push origin ${BASE_BRANCH}:v$CI_KUBERNETES_VERSION-config -f
    fi
env:
  global:
    - DOCKER_CLI_EXPERIMENTAL=enabled
    - LNMP_CN_ENV=false
    - LNMP_BRANCH=20.10

jobs:
  include:
    # https://kubernetes.io/docs/setup/release/version-skew-policy/#supported-versions
    # 只维护最新的 3 个版本
    # alpha version
    # - os: linux
    #   dist: focal
    #   env: CI_KUBERNETES_VERSION=1.19.0-rc.4 LNMP_K8S_GET="--url"
    # next version
    - os: linux
      dist: focal
      env: CI_KUBERNETES_VERSION=1.20.0-beta.0 LNMP_K8S_GET="--url"
    # current stable version
    # cri-o
    - os: linux
      dist: focal
      env: CI_KUBERNETES_VERSION=1.19.0 LNMP_K8S_LOCAL_INSTALL_OPTIONS="--crio" k8S_IMAGE_NS=khs1994 k8S_IMAGE_REGISTRY=useccr.ccs.tencentyun.com
    # containerd
    - os: linux
      dist: focal
      env: CI_KUBERNETES_VERSION=1.19.2 LNMP_K8S_GET="--url"                            GENERATE_CLI_HELP=true
    # arm64
    - os: linux
      dist: focal
      arch: arm64-graviton2
      virt: vm
      group: edge
      env: CI_KUBERNETES_VERSION=1.19.0 LNMP_K8S_GET="--url"
    # containerd + cni calico ebpf
    - os: linux
      dist: focal
      env: CI_KUBERNETES_VERSION=1.19.2 LNMP_K8S_GET="--url"                            CNI_CALICO_EBPF=true
    # containerd + ipv6
    # - os: linux
    #   dist: focal
    #   arch: arm64-graviton2
    #   virt: lxd
    #   group: edge
    #   env: CI_KUBERNETES_VERSION=1.19.2 LNMP_K8S_GET="--url"                            IPV6=true
    # docker
    - os: linux
      dist: focal
      env: CI_KUBERNETES_VERSION=1.19.0 LNMP_K8S_LOCAL_INSTALL_OPTIONS="--docker"
    # custom k8s root
    - os: linux
      dist: focal
      env: CI_KUBERNETES_VERSION=1.19.2 LNMP_K8S_GET="--url"                            K8S_ROOT=/opt/k8s-custom
    # old version
    - os: linux
      dist: focal
      env: CI_KUBERNETES_VERSION=1.18.9 LNMP_K8S_GET="--url"
    - os: linux
      dist: focal
      env: CI_KUBERNETES_VERSION=1.17.12 LNMP_K8S_GET="--url"
  fast_finish: true
  allow_failures:
  - env: CI_KUBERNETES_VERSION=1.20.0-beta.0 LNMP_K8S_GET="--url"
  # - env: CI_KUBERNETES_VERSION=1.20.0-beta.0 LNMP_K8S_GET="--url"

branches:
  only:
    - master
